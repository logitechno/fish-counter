const { Client, GatewayIntentBits, EmbedBuilder} = require('discord.js');
const sqlite3 = require('sqlite3').verbose();
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });
const { token, channelID, logChannelID, messagePattern } = require('./config.json');

const db = new sqlite3.Database('./messages.db', (err) => {
    if (err) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', err.message);
    } else {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite');
        db.run(`CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            messageId TEXT,
            author TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);
    }
});

const MESSAGE_PATTERN = new RegExp(messagePattern);

let expectedNumber

let fishChannel
let logChannel

client.once('ready', async () => {
    console.log(`–ó–∞—â–∏—Ç–Ω–∏–∫ —Ä—ã–±–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ${client.user.tag}!`);

    try {
        fishChannel = await client.channels.fetch(channelID);
        logChannel = await client.channels.fetch(logChannelID);
        if (fishChannel.isTextBased() && logChannel.isTextBased()) {
            await fishChannel.messages.fetch();

            db.get(`SELECT MAX(id) AS id FROM messages`, async function (err, row) {
                if (err) throw err;
                if (row.id == null) {
                    expectedNumber = 1;
                    const logMessage = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —á–∏—Å–µ–ª, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1';
                    console.log(logMessage);
                    await logToChannel(logMessage, '–û—Ç–ª–∞–¥–∫–∞');
                    return;
                }

                expectedNumber = row.id + 1;
                const logMessage = `–û–∂–∏–¥–∞–µ–º–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ: ${expectedNumber}`;
                console.log(logMessage);
                await logToChannel(logMessage, '–û—Ç–ª–∞–¥–∫–∞');
            });

        } else {
            console.error('–ö–∞–Ω–∞–ª –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π!');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
    }
});

client.on('messageCreate', async (message) => {
    if (message.channel.id === channelID && !message.author.bot) {
        const pattern = MESSAGE_PATTERN.exec(message.content);

        if (pattern == null || expectedNumber !== parseInt(pattern.at(0), 10)) {
            message.delete()
                .then(() => {
                    message.author.send(`–û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedNumber} üêü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!`);
                })
                .catch(err =>
                    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err))

        } else {
            expectedNumber++;

            const newMessage = {
                content: message.content,
                messageId: message.id,
                author: message.author.username,
            };

            const sql = `INSERT INTO messages (messageId, author) VALUES (?, ?)`;
            db.run(sql, [newMessage.messageId, newMessage.author], function (err) {
                try {
                    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${newMessage.content}`);
                } catch {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', err.message);
                }
            });
        }
    }
});

client.on('messageDelete', async (message) => {
    if (message.channel.id !== channelID) return;

    const logMessage = `**–ê–≤—Ç–æ—Ä:** ${message.author.tag} (ID: ${message.author.id})\n**–ö–∞–Ω–∞–ª:** ${message.channel.name} (ID: ${message.channel.id})\n**–¢–µ–∫—Å—Ç:** \`${message.content}\``;
    await logToChannel(logMessage, '–ü—Ä–æ–ø–∞–∂–∞ —Ä—ã–±—ã!');
});

client.on('messageUpdate', async (oldMessage, newMessage) => {
    if (oldMessage.channel.id !== channelID) return;

    const logMessage = `**–ê–≤—Ç–æ—Ä:** ${oldMessage.author.tag} (ID: ${oldMessage.author.id})\n**–ö–∞–Ω–∞–ª:** ${oldMessage.channel.name} (ID: ${oldMessage.channel.id})\n**–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç:** "${oldMessage.content}"\n**–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:** \`${newMessage.content}\``;
    await logToChannel(logMessage, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
});

async function logToChannel(logMessage, title) {
    if (logChannel.isTextBased() && logChannel) {
        const embed = new EmbedBuilder()
            .setColor(0xc3d660)
            .setTitle(`${title}`)
            .setDescription(`${logMessage}`)
            .setTimestamp();

        logChannel.send({ embeds: [embed] })
            .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª:', err));
    }
}

client.login(token);
